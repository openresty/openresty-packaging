Index: openresty-openssl/include/openssl/bio.h
===================================================================
--- openresty-openssl.orig/include/openssl/bio.h
+++ openresty-openssl/include/openssl/bio.h
@@ -217,6 +217,8 @@ void BIO_clear_flags(BIO *b, int flags);
 /* Returned from the accept BIO when an accept would have blocked */
 # define BIO_RR_ACCEPT                   0x03
 
+# define BIO_RR_SSL_SESSION_LOOKUP       0x04
+
 /* These are passed by the BIO callback */
 # define BIO_CB_FREE     0x01
 # define BIO_CB_READ     0x02
Index: openresty-openssl/include/openssl/ssl.h
===================================================================
--- openresty-openssl.orig/include/openssl/ssl.h
+++ openresty-openssl/include/openssl/ssl.h
@@ -812,6 +812,7 @@ __owur int SSL_extension_supported(unsig
 # define SSL_X509_LOOKUP        4
 # define SSL_ASYNC_PAUSED       5
 # define SSL_ASYNC_NO_JOBS      6
+# define SSL_SESS_LOOKUP        7
 
 /* These will only be used when doing non-blocking IO */
 # define SSL_want_nothing(s)     (SSL_want(s) == SSL_NOTHING)
@@ -820,6 +821,7 @@ __owur int SSL_extension_supported(unsig
 # define SSL_want_x509_lookup(s) (SSL_want(s) == SSL_X509_LOOKUP)
 # define SSL_want_async(s)       (SSL_want(s) == SSL_ASYNC_PAUSED)
 # define SSL_want_async_job(s)   (SSL_want(s) == SSL_ASYNC_NO_JOBS)
+# define SSL_want_sess_lookup(s) (SSL_want(s) == SSL_SESS_LOOKUP)
 
 # define SSL_MAC_FLAG_READ_MAC_STREAM 1
 # define SSL_MAC_FLAG_WRITE_MAC_STREAM 2
@@ -1052,6 +1054,8 @@ DECLARE_PEM_rw(SSL_SESSION, SSL_SESSION)
 # define SSL_ERROR_WANT_ACCEPT           8
 # define SSL_ERROR_WANT_ASYNC            9
 # define SSL_ERROR_WANT_ASYNC_JOB       10
+# define SSL_ERROR_WANT_SESSION_LOOKUP  11
+# define SSL_ERROR_PENDING_SESSION      11 /* BoringSSL compatibility */
 # define SSL_CTRL_SET_TMP_DH                     3
 # define SSL_CTRL_SET_TMP_ECDH                   4
 # define SSL_CTRL_SET_TMP_DH_CB                  6
@@ -1457,6 +1461,7 @@ int SSL_SESSION_print(BIO *fp, const SSL
 int SSL_SESSION_print_keylog(BIO *bp, const SSL_SESSION *x);
 int SSL_SESSION_up_ref(SSL_SESSION *ses);
 void SSL_SESSION_free(SSL_SESSION *ses);
+SSL_SESSION *SSL_magic_pending_session_ptr(void);
 __owur int i2d_SSL_SESSION(SSL_SESSION *in, unsigned char **pp);
 __owur int SSL_set_session(SSL *to, SSL_SESSION *session);
 int SSL_CTX_add_session(SSL_CTX *s, SSL_SESSION *c);
Index: openresty-openssl/ssl/bio_ssl.c
===================================================================
--- openresty-openssl.orig/ssl/bio_ssl.c
+++ openresty-openssl/ssl/bio_ssl.c
@@ -139,6 +139,10 @@ static int ssl_read(BIO *b, char *out, i
         BIO_set_retry_special(b);
         retry_reason = BIO_RR_SSL_X509_LOOKUP;
         break;
+    case SSL_ERROR_WANT_SESSION_LOOKUP:
+        BIO_set_retry_special(b);
+        retry_reason = BIO_RR_SSL_SESSION_LOOKUP;
+        break;
     case SSL_ERROR_WANT_ACCEPT:
         BIO_set_retry_special(b);
         retry_reason = BIO_RR_ACCEPT;
@@ -211,6 +215,10 @@ static int ssl_write(BIO *b, const char
         BIO_set_retry_special(b);
         retry_reason = BIO_RR_SSL_X509_LOOKUP;
         break;
+    case SSL_ERROR_WANT_SESSION_LOOKUP:
+        BIO_set_retry_special(b);
+        retry_reason = BIO_RR_SSL_SESSION_LOOKUP;
+        break;
     case SSL_ERROR_WANT_CONNECT:
         BIO_set_retry_special(b);
         retry_reason = BIO_RR_CONNECT;
@@ -364,6 +372,10 @@ static long ssl_ctrl(BIO *b, int cmd, lo
             BIO_set_retry_special(b);
             BIO_set_retry_reason(b, BIO_RR_SSL_X509_LOOKUP);
             break;
+        case SSL_ERROR_WANT_SESSION_LOOKUP:
+            BIO_set_retry_special(b);
+            BIO_set_retry_reason(b, BIO_RR_SSL_SESSION_LOOKUP);
+            break;
         default:
             break;
         }
Index: openresty-openssl/ssl/ssl_lib.c
===================================================================
--- openresty-openssl.orig/ssl/ssl_lib.c
+++ openresty-openssl/ssl/ssl_lib.c
@@ -3177,6 +3177,9 @@ int SSL_get_error(const SSL *s, int i)
         if (SSL_want_async_job(s)) {
             return SSL_ERROR_WANT_ASYNC_JOB;
         }
+        if (SSL_want_sess_lookup(s)) {
+            return SSL_ERROR_WANT_SESSION_LOOKUP;
+        }
     }
 
     if (i == 0) {
Index: openresty-openssl/ssl/ssl_sess.c
===================================================================
--- openresty-openssl.orig/ssl/ssl_sess.c
+++ openresty-openssl/ssl/ssl_sess.c
@@ -40,6 +40,8 @@
 #include <openssl/engine.h>
 #include "ssl_locl.h"
 
+static const char g_pending_session_magic = 0;
+
 static void SSL_SESSION_list_remove(SSL_CTX *ctx, SSL_SESSION *s);
 static void SSL_SESSION_list_add(SSL_CTX *ctx, SSL_SESSION *s);
 static int remove_session_lock(SSL_CTX *ctx, SSL_SESSION *c, int lck);
@@ -510,6 +512,10 @@ int ssl_get_prev_session(SSL *s, const P
                                              PACKET_remaining(session_id),
                                              &copy);
 
+        if (ret == SSL_magic_pending_session_ptr()) {
+            return -2; /* Retry later */
+        }
+
         if (ret != NULL) {
             s->session_ctx->stats.sess_cb_hit++;
 
@@ -895,6 +901,11 @@ X509 *SSL_SESSION_get0_peer(SSL_SESSION
     return s->peer;
 }
 
+SSL_SESSION *SSL_magic_pending_session_ptr(void)
+{
+    return (SSL_SESSION *) &g_pending_session_magic;
+}
+
 int SSL_SESSION_set1_id_context(SSL_SESSION *s, const unsigned char *sid_ctx,
                                 unsigned int sid_ctx_len)
 {
Index: openresty-openssl/ssl/statem/statem.c
===================================================================
--- openresty-openssl.orig/ssl/statem/statem.c
+++ openresty-openssl/ssl/statem/statem.c
@@ -591,16 +591,18 @@ static SUB_STATE_RETURN read_state_machi
             }
 
             s->first_packet = 0;
-            if (!PACKET_buf_init(&pkt, s->init_msg, len)) {
+
+            st->read_state = READ_STATE_PROCESS;
+            /* Fall through */
+
+        case READ_STATE_PROCESS:
+            if (!PACKET_buf_init(&pkt, s->init_msg, s->init_num)) {
                 ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_INTERNAL_ERROR);
                 SSLerr(SSL_F_READ_STATE_MACHINE, ERR_R_INTERNAL_ERROR);
                 return SUB_STATE_ERROR;
             }
             ret = process_message(s, &pkt);
 
-            /* Discard the packet data */
-            s->init_num = 0;
-
             switch (ret) {
             case MSG_PROCESS_ERROR:
                 return SUB_STATE_ERROR;
@@ -620,6 +622,9 @@ static SUB_STATE_RETURN read_state_machi
                 st->read_state = READ_STATE_HEADER;
                 break;
             }
+
+            /* Discard the packet data */
+            s->init_num = 0;
             break;
 
         case READ_STATE_POST_PROCESS:
Index: openresty-openssl/ssl/statem/statem.h
===================================================================
--- openresty-openssl.orig/ssl/statem/statem.h
+++ openresty-openssl/ssl/statem/statem.h
@@ -60,6 +60,7 @@ typedef enum {
 typedef enum {
     READ_STATE_HEADER,
     READ_STATE_BODY,
+    READ_STATE_PROCESS,
     READ_STATE_POST_PROCESS
 } READ_STATE;
 
Index: openresty-openssl/ssl/statem/statem_srvr.c
===================================================================
--- openresty-openssl.orig/ssl/statem/statem_srvr.c
+++ openresty-openssl/ssl/statem/statem_srvr.c
@@ -1147,11 +1147,16 @@ MSG_PROCESS_RETURN tls_process_client_he
             s->hit = 1;
         } else if (i == -1) {
             goto err;
+        } else if (i == -2) {
+            s->rwstate = SSL_SESS_LOOKUP;
+            s->statem.read_state_work = WORK_MORE_A;
+            return MSG_PROCESS_ERROR;
         } else {
             /* i == 0 */
             if (!ssl_get_new_session(s, 1))
                 goto err;
         }
+        s->rwstate = SSL_NOTHING;
     }
 
     if (ssl_bytes_to_cipher_list(s, &cipher_suites, &(ciphers),
Index: openresty-openssl/util/libssl.num
===================================================================
--- openresty-openssl.orig/util/libssl.num
+++ openresty-openssl/util/libssl.num
@@ -403,5 +403,6 @@ SSL_dane_clear_flags
 SSL_SESSION_get0_cipher                 404	1_1_0	EXIST::FUNCTION:
 SSL_SESSION_get0_id_context             405	1_1_0	EXIST::FUNCTION:
 SSL_SESSION_set1_id                     406	1_1_0	EXIST::FUNCTION:
+SSL_magic_pending_session_ptr           407 1_1_0   EXIST::FUNCTION:
 SSL_COMP_get_id                         412	1_1_0d	EXIST::FUNCTION:
 SSL_COMP_get0_name                      413	1_1_0d	EXIST::FUNCTION:

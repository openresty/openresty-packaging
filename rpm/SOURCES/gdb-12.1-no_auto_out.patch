diff -upr gdb-12.1/gdb/auto-load.c gdb-12.1-patched/gdb/auto-load.c
--- gdb-12.1/gdb/auto-load.c	2022-05-01 11:46:31.000000000 -0700
+++ gdb-12.1-patched/gdb/auto-load.c	2022-09-11 01:28:50.924000000 -0700
@@ -448,10 +448,11 @@ file_is_auto_load_safe (const char *file
   if (filename_is_in_auto_load_safe_path_vec (filename, &filename_real))
     return true;
 
-  warning (_("File \"%ps\" auto-loading has been declined by your "
-	     "`auto-load safe-path' set to \"%s\"."),
-	   styled_string (file_name_style.style (), filename_real.get ()),
-	   auto_load_safe_path.c_str ());
+  if (!gdb_no_auto_out)
+    warning (_("File \"%ps\" auto-loading has been declined by your "
+               "`auto-load safe-path' set to \"%s\"."),
+             styled_string (file_name_style.style (), filename_real.get ()),
+             auto_load_safe_path.c_str ());
 
   if (!advice_printed)
     {
diff -upr gdb-12.1/gdb/breakpoint.c gdb-12.1-patched/gdb/breakpoint.c
--- gdb-12.1/gdb/breakpoint.c	2022-05-01 11:46:31.000000000 -0700
+++ gdb-12.1-patched/gdb/breakpoint.c	2022-09-11 01:25:03.978000000 -0700
@@ -8197,6 +8197,9 @@ set_momentary_breakpoint_at_pc (struct g
 static void
 mention (struct breakpoint *b)
 {
+  if (gdb_no_auto_out)
+    return;
+
   b->ops->print_mention (b);
   current_uiout->text ("\n");
 }
@@ -12017,6 +12020,9 @@ bkpt_print_it (bpstat *bs)
   int bp_temp;
   struct ui_out *uiout = current_uiout;
 
+  if (gdb_no_auto_out)
+    return PRINT_NOTHING;
+
   gdb_assert (bs->bp_location_at != NULL);
 
   bl = bs->bp_location_at.get ();
@@ -12052,6 +12058,9 @@ bkpt_print_mention (struct breakpoint *b
   if (current_uiout->is_mi_like_p ())
     return;
 
+  if (gdb_no_auto_out)
+    return;
+
   switch (b->type)
     {
     case bp_breakpoint:
diff -upr gdb-12.1/gdb/infcmd.c gdb-12.1-patched/gdb/infcmd.c
--- gdb-12.1/gdb/infcmd.c	2022-05-01 11:46:31.000000000 -0700
+++ gdb-12.1-patched/gdb/infcmd.c	2022-09-11 00:50:18.762000000 -0700
@@ -433,7 +433,7 @@ run_command_1 (const char *args, int fro
   if (args != NULL)
     current_inferior ()->set_args (args);
 
-  if (from_tty)
+  if (from_tty && !gdb_no_auto_out)
     {
       uiout->field_string (NULL, "Starting program");
       uiout->text (": ");
diff -upr gdb-12.1/gdb/inferior.h gdb-12.1-patched/gdb/inferior.h
--- gdb-12.1/gdb/inferior.h	2022-05-01 11:46:31.000000000 -0700
+++ gdb-12.1-patched/gdb/inferior.h	2022-09-11 00:53:09.090000000 -0700
@@ -65,6 +65,8 @@ struct thread_info;
 
 #include <unordered_map>
 
+extern bool gdb_no_auto_out;
+
 struct infcall_suspend_state;
 struct infcall_control_state;
 
diff -upr gdb-12.1/gdb/infrun.c gdb-12.1-patched/gdb/infrun.c
--- gdb-12.1/gdb/infrun.c	2022-05-01 11:46:31.000000000 -0700
+++ gdb-12.1-patched/gdb/infrun.c	2022-09-11 01:04:41.357000000 -0700
@@ -8172,6 +8172,9 @@ print_signal_exited_reason (struct ui_ou
 void
 print_exited_reason (struct ui_out *uiout, int exitstatus)
 {
+  if (gdb_no_auto_out)
+    return;
+
   struct inferior *inf = current_inferior ();
   std::string pidstr = target_pid_to_str (ptid_t (inf->pid));
 
@@ -8260,6 +8263,9 @@ print_no_history_reason (struct ui_out *
 static void
 print_stop_location (const target_waitstatus &ws)
 {
+  if (gdb_no_auto_out)
+    return;
+
   int bpstat_ret;
   enum print_what source_flag;
   int do_frame_printing = 1;
@@ -8317,6 +8323,9 @@ print_stop_location (const target_waitst
 void
 print_stop_event (struct ui_out *uiout, bool displays)
 {
+  if (gdb_no_auto_out)
+    return;
+
   struct target_waitstatus last;
   struct thread_info *tp;
 
diff -upr gdb-12.1/gdb/language.c gdb-12.1-patched/gdb/language.c
--- gdb-12.1/gdb/language.c	2022-05-01 11:46:31.000000000 -0700
+++ gdb-12.1-patched/gdb/language.c	2022-09-11 01:22:36.613000000 -0700
@@ -511,11 +511,12 @@ add_set_language_command ()
 	  || lang->la_language == language_auto)
 	continue;
 
-      /* Note that we add the newline at the front, so we don't wind
-	 up with a trailing newline.  */
-      doc.printf ("\n%-16s Use the %s language",
-		  lang->name (),
-		  lang->natural_name ());
+      if (!gdb_no_auto_out)
+        /* Note that we add the newline at the front, so we don't wind
+           up with a trailing newline.  */
+        doc.printf ("\n%-16s Use the %s language",
+                    lang->name (),
+                    lang->natural_name ());
     }
 
   add_setshow_enum_cmd ("language", class_support,
diff -upr gdb-12.1/gdb/language.h gdb-12.1-patched/gdb/language.h
--- gdb-12.1/gdb/language.h	2022-03-19 21:59:56.000000000 -0700
+++ gdb-12.1-patched/gdb/language.h	2022-09-11 01:23:11.852000000 -0700
@@ -27,6 +27,8 @@
 #include "gdbsupport/function-view.h"
 #include "expression.h"
 
+extern bool gdb_no_auto_out;
+
 /* Forward decls for prototypes.  */
 struct value;
 struct objfile;
diff -upr gdb-12.1/gdb/linux-thread-db.c gdb-12.1-patched/gdb/linux-thread-db.c
--- gdb-12.1/gdb/linux-thread-db.c	2022-05-01 11:46:31.000000000 -0700
+++ gdb-12.1-patched/gdb/linux-thread-db.c	2022-09-11 00:54:32.849000000 -0700
@@ -936,7 +936,8 @@ try_thread_db_load_1 (struct thread_db_i
       return false;
     }
 
-  printf_unfiltered (_("[Thread debugging using libthread_db enabled]\n"));
+  if (!gdb_no_auto_out)
+    printf_unfiltered (_("[Thread debugging using libthread_db enabled]\n"));
 
   if (!libthread_db_search_path.empty () || libthread_db_debug)
     {
@@ -946,8 +947,11 @@ try_thread_db_load_1 (struct thread_db_i
       if (library == NULL)
 	library = LIBTHREAD_DB_SO;
 
-      printf_unfiltered (_("Using host libthread_db library \"%ps\".\n"),
-			 styled_string (file_name_style.style (), library));
+      if (!gdb_no_auto_out)
+        {
+          printf_unfiltered (_("Using host libthread_db library \"%ps\".\n"),
+                             styled_string (file_name_style.style (), library));
+        }
     }
 
   /* The thread library was detected.  Activate the thread_db target
diff -upr gdb-12.1/gdb/main.c gdb-12.1-patched/gdb/main.c
--- gdb-12.1/gdb/main.c	2022-05-01 11:46:31.000000000 -0700
+++ gdb-12.1-patched/gdb/main.c	2022-09-11 00:49:37.812000000 -0700
@@ -56,6 +56,8 @@
 #include "observable.h"
 #include "serial.h"
 
+bool gdb_no_auto_out = false;
+
 /* The selected interpreter.  This will be used as a set command
    variable, so it should always be malloc'ed - since
    do_setshow_command will free it.  */
@@ -655,6 +657,20 @@ captured_main_1 (struct captured_main_ar
   int save_auto_load;
   int ret = 1;
 
+  {
+    const char *val = getenv("OR_GDB_NO_AUTO_OUT");
+    if (val)
+      {
+        char c = val[0];
+        if (c != '\0' && c != '0' && c != 'f' && c != 'F')
+            gdb_no_auto_out = true;
+        else
+            gdb_no_auto_out = false;
+      }
+    else
+      gdb_no_auto_out = false;
+  }
+
 #ifdef HAVE_USEFUL_SBRK
   /* Set this before constructing scoped_command_stats.  */
   lim_at_start = (char *) sbrk (0);
diff -upr gdb-12.1/gdb/top.c gdb-12.1-patched/gdb/top.c
--- gdb-12.1/gdb/top.c	2022-05-01 11:46:31.000000000 -0700
+++ gdb-12.1-patched/gdb/top.c	2022-09-11 00:58:34.138000000 -0700
@@ -1775,6 +1775,9 @@ quit_confirm (void)
   if (!have_live_inferiors ())
     return 1;
 
+  if (gdb_no_auto_out)
+    return 1;
+
   /* Build the query string as a single string.  */
   string_file stb;
 
diff -upr gdb-12.1/gdb/utils.c gdb-12.1-patched/gdb/utils.c
--- gdb-12.1/gdb/utils.c	2022-05-01 11:46:31.000000000 -0700
+++ gdb-12.1-patched/gdb/utils.c	2022-09-11 12:11:46.453000000 -0700
@@ -1620,6 +1620,36 @@ begin_line (void)
    FILTER is true) (since prompt_for_continue may do so) so this
    routine should not be called when cleanups are not in place.  */
 
+
+static void
+print_self_backtrace(void)
+{
+  enum {
+    BT_BUF_SIZE = 500
+  };
+
+  int j, nptrs;
+  void *buffer[BT_BUF_SIZE];
+  char **strings;
+
+  nptrs = backtrace (buffer, BT_BUF_SIZE);
+  if (!nptrs)
+    return;
+
+  strings = backtrace_symbols (buffer, nptrs);
+  if (strings == NULL)
+    {
+      perror ("backtrace_symbols");
+      exit (EXIT_FAILURE);
+    }
+
+  for (j = 0; j < nptrs; j++)
+    fprintf (stderr, "  %s\n", strings[j]);
+
+  free(strings);
+}
+
+
 static void
 fputs_maybe_filtered (const char *linebuffer, struct ui_file *stream,
 		      int filter)
@@ -1629,6 +1659,15 @@ fputs_maybe_filtered (const char *linebu
   if (linebuffer == 0)
     return;
 
+  if (gdb_no_auto_out
+      && !filter
+      && stream == gdb_stdout
+      && strcmp(linebuffer, "\n") == 0)
+    {
+      fprintf(stderr, "Found single newline unfiltered output at\n");
+      print_self_backtrace();
+    }
+
   /* Don't do any filtering if it is disabled.  */
   if (!stream->can_page ()
       || stream != gdb_stdout
